Contains functions to manipulate Inventory

1. get_displayed_quantity(pysql, product_id) : 

    - returns the displayed quantity corresponding to given product_id
    - returns 0 if displayed quantity is 0 or product_id does not exist

    pysql : PySql object for current database

    product_id : id of the product in question

2. get_stored_quantity(pysql, product_id) : 

    - returns the stored quantity corresponding to given product_id
    - returns 0 if displayed quantity is 0 or product_id does not exist

    pysql : PySql object for current database

    product_id : id of the product in question

3. is_below_threshold(pysql, product_id) : 

    - checks whether stored quantity of the product is below store threshold
    - returns 1 if true
    - returns 0 if false

    pysql : PySql object for current database

    product_id : id of the product in question

4. update_threshold(pysql, product_id, threshold) : 

    - updates the store threshold of the product in the Inventory

    pysql : PySql object for current database

    product_id : id of the product in question

5. sub_product_from_inventory(pysql, product_id, quantity) :

    - updates the store quantity attribute of Inventory by subtracting 'quantity' from existing store quantity
    - does nothing if there is an error in the product_id or quantity
    - logs transaction if the inventory is updated successfully

    pysql : PySql object for current database

    product_id : id of the product in question

    quantity : quantity of the product to be subtracted (Numeric(9, 3))

6. log_transaction(pysql, transaction_type, product_id, quantity) : 

    - updates the transaction log

    pysql : PySql object for current database

    transaction_type : type of transaction ('INV_SUB', ) (string)

    prod_id : id of the product in question (string)

    quantity : quantity of product (Numeric(9, 3))

7. get_inventory_details(pysql):

    - returns prod_id, name, stored_quantity, displayed_quantity, threshold, unit_type of all products
        in the inventory

    pysql : PySql object of current database

8. get_transactions(pysql):

    - returns transaction_id, product_id, name, transaction_type, quantity, unit_type
        of all transactions

    pysql : PySql object of current database

9. get_transactions_by_date(pysql, date):

    - returns info same as get_transactions with timestamp for all transactions
        on given date

    pysql : PySql object of current database

    date : date in format "YYYY-MM-DD" on which transactions are required (string)

10. get_transactions_of_product_by_date(pysql, product_id, date)

    - returns transaction_id, transaction_type, quantity, timestamp of transactions
        of given product on given date

    pysql : PySql object of current database

    product_id : id of product required (string)

    date : date in format "YYYY-MM-DD" on which transactions are required (string)

